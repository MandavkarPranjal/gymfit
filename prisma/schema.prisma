// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false) @map("email_verified")
  image         String?
  workoutDaysPerWeek  Int           @default(3)
  createdAt     DateTime
  updatedAt     DateTime
  gymWorkouts   GymWorkout[]
  weeklyStreaks WeeklyStreak[]
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GymWorkout {
  id             BigInt      @id @default(autoincrement())
  userId         String
  workoutName    String      @map("workout_name")
  durationMinutes Int        @map("duration_minutes")
  caloriesBurned Int?        @map("calories_burned")
  workoutDate    DateTime    @map("workout_date")
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises      Exercise[]

  @@map("gym_workout")
}

model WeeklyStreak {
  id            BigInt      @id @default(autoincrement())
  userId        String
  weekStartDate DateTime    @map("week_start_date")
  streakCount   Int         @default(0) @map("streak_count")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weekly_streak")
}

model Exercise {
  id          BigInt      @id @default(autoincrement())
  workoutId   BigInt
  exerciseName String     @map("exercise_name")
  sets        Int
  reps        Int
  weight      Float?
  weightUnit  String      @default("kg") @map("weight_unit")
  muscleGroup String      @map("muscle_group")
  workout     GymWorkout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("exercise")
}
